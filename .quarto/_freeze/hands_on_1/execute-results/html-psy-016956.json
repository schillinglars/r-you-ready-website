{
  "hash": "363cec1600f10868aa3bff1ef67f30e6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"hands_on_1\"\n---\n\n\n\n\n# Hands On 1\n\nBei Bedarf finden sich hier nochmal die Slides zur EH1: <iframe src=\"EH_1.html\" width=\"100%\" height=\"500px\"></iframe>\n\n## Installation R und R-Studio\n\nInstalliere R und RStudio:\n\n1.  Installation von R – neueste Version 4.5.1: <https://stat.ethz.ch/CRAN/>\n\n2.  Installation von Rstudio <https://posit.co/download/rstudio-desktop/>\n\n## Einstellungen\n\n1.  RStudio öffnen & Einstellungen vornehmen: Unter «tools» –«global options» die hier beschriebenen Einstellungen vornehmen (3x): <https://methodenlehre.github.io/einfuehrung-in-R/chapters/01-workflow.html>\n\n<!-- -->\n\n2.  Neues Skript öffnen & orientieren:\n\n<!-- -->\n\na)  Skript für Code-Eingabe sowie Kommentare\nb)  Konsole für die Ausführung von Code -\\> Testen Sie eine einfache mathematische Operation in dieser; reproduzieren Sie diese mittels Skript\nc)  Rechts oben: Environment & History\nd)  Rechts unten: Files, Plots, Packages und Help Viewer\n\n## Pakete installieren und laden\n\n1.  Pakete installieren (nur 1x notwendig) «Meta-package» -\\> führe diesen Code in der Konsole aus\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    install.packages(\"tidyverse\")\n    ```\n    :::\n\n\n\n\n2.  Paket laden (jede Session notwendig) library(tidyverse)\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(tidyverse)\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    \n    ```\n    ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n    ✔ dplyr     1.1.4     ✔ readr     2.1.5\n    ✔ forcats   1.0.0     ✔ stringr   1.5.1\n    ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n    ✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n    ✔ purrr     1.0.4     \n    ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n    ✖ dplyr::filter() masks stats::filter()\n    ✖ dplyr::lag()    masks stats::lag()\n    ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\nTipp: Pakete regelmässig updaten mit z.B. update.packages()\n\n## Hands on: Coding Basics\n\n### Erste einfache Operationen:\n\n1.  a\\. Nutze R als Taschenrechner\n\n    1.  `123+456`\n\n    2.  `144*112`\n\n    3.  `10/3`\n\n    4.  Quadriere 420\n\n    5.  Ziehe die Quadratwurzel aus 146 mit der Funktion `sqrt()`\n\n    6.  Berechne den Rest der Division 10/3 Division mit dem Modulo Funktionen: `%%`\n\n### Erste Zuweisungen\n\n1.  Weise den Wert 5 der Variable `x` zu mit dem Operator `<-`\n\n2.  Weise eine beliebige Zahl der variable `y` hinzu und dividiere dann `x` durch `y`. Speichere dieses Ergebnis in der Variable `z.`\n\n3.  Schaue dir das Ergebniss in deinem Environment an. Lass dir das Ergebniss auch in der Konsole ausgeben. Das Environment findest du oben rechts, die Konsole ist unter deinem Skript.\n\n4.  Erstelle zwei Variablen: Eine mit deinem Vornamen und eine mit deinem Nachnamen. Benutze dafür `\"\"`\n\n5.  Kombiniere deinen Vor- und Nachnamen zu deinem vollen Namen mittels `paste` . Speichere diesen als `voller_name`.\n\n### Vektoren, mean(), sum()\n\n1.  Definiere einen Vektor «x» mit den Zahlen 100, 80, 54, 73. Einen Vektor definiert man so: `x <- c(...)`\n\n2.  Wende den Befehl `boxplot()` für deinen Vektor an\n\n3.  Berechne die Summe `sum()`und den Mittelwert `mean()` von deinem Vektor\n\n4.  Multipliziere deinen Vektor mit `*2`\n\nDie wichtigsten Operatoren und Funktionen in R: <https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html>\n\n### Logische Operatoren.\n\n1.  Teste ob die Zahl 5 größer als 2 ist –\\> TRUE orFALSE?\n\n2.  Teste ob 6 ungleich 8 ist –\\> TRUE or FALSE?\n\n3.  Subtrahiere 80 von 50 und speichere das Ergebnis in einer Variable namens «diff_score».\n\n4.  Berechne mit abs() den absoluten Wert von «diff_score» lassen dir diesen mit print() in der Konsole ausgeben\n\n## Für fortgeschrittene R-Nutzer:innen:\n\n1.  Speichere die beiden höchsten Werte aus «first_vector» in einer neuen Variable ab.\n\n2.  Erstelle einen Vektor mit Werten von 0-1000 in 10er Schritten.\n\n3.  Ziehe zufällig eine Zahl aus diesem Vektor\n\n4.  Generiere einen Vektor, der aus 50 Wiederholungen der Zahl 3 besteht.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}