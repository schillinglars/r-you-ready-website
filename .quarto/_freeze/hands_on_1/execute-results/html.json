{
  "hash": "e2061448a5c8c38667f1ec744153a84c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands On 1\"\n---\n\n\n\n\n# Hands On - Codings Basics (Einheiten 1 und 2)\n\nBei Bedarf finden sich hier nochmal die Slides zur EH1: <iframe src=\"EH_1.html\" width=\"100%\" height=\"500px\"></iframe>\n\nUnd EH2\n\n<iframe src=\"EH_2.html\" width=\"100%\" height=\"500px\">\n\n</iframe>\n\n## Installation R und R-Studio\n\nInstalliere R und RStudio:\n\n1.  Installation von R – neueste Version 4.5.1: <https://stat.ethz.ch/CRAN/>\n\n2.  Installation von RStudio (Version 2025.09.0): <https://posit.co/download/rstudio-desktop/>\n\nDu weisst nicht was mit R auf sich hat? Hier ist eine Kurzerklärung: <https://methodenlehre.github.io/einfuehrung-in-R/>\n\n## Einstellungen\n\n1.  RStudio öffnen & Einstellungen vornehmen: Unter «tools» –«global options» die **unter 1.1.** beschriebenen Einstellungen vornehmen:\n\n    <https://methodenlehre.github.io/einfuehrung-in-R/chapters/01-workflow.html>\n\n<!-- -->\n\n2.  Neues Skript öffnen & orientieren\n\n## RStudio Oberfläche\n\nIm folgenden machen wir uns vertraut mit der Oberfläche von RStudio:\n\n![](images/R_overview.png){fig-align=\"center\"}\n\n<!-- -->\n\na)  Skript für Code-Eingabe sowie Kommentare\nb)  Konsole für die Ausführung von Code -\\> Teste einfache mathematische Operation in dieser; reproduziere diese mittels Skript\nc)  Rechts oben: Environment & History\nd)  Rechts unten: Files, Plots, Packages und Help Viewer\n\n## Pakete installieren und laden\n\nTidyverse ist ein Meta-Paket, das mehrere Pakete umfasst[![https://www.tidyverse.org/](images/clipboard-602781303.png){width=\"472\"}](https://www.tidyverse.org/)\n\n1.  Pakete installieren (nur 1x notwendig) -\\> führe diesen Code in der Konsole aus\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    install.packages(\"tidyverse\")\n    ```\n    :::\n\n\n\n\n2.  Paket laden (innerhalb des Skriptes, bei jedem Neustart von R notwendig)\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(tidyverse)\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    \n    ```\n    Warning: Paket 'tidyverse' wurde unter R Version 4.4.3 erstellt\n    ```\n    \n    \n    :::\n    \n    ::: {.cell-output .cell-output-stderr}\n    \n    ```\n    Warning: Paket 'tibble' wurde unter R Version 4.4.3 erstellt\n    ```\n    \n    \n    :::\n    \n    ::: {.cell-output .cell-output-stderr}\n    \n    ```\n    ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n    ✔ dplyr     1.1.4     ✔ readr     2.1.5\n    ✔ forcats   1.0.0     ✔ stringr   1.5.1\n    ✔ ggplot2   3.5.1     ✔ tibble    3.3.0\n    ✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n    ✔ purrr     1.0.4     \n    ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n    ✖ dplyr::filter() masks stats::filter()\n    ✖ dplyr::lag()    masks stats::lag()\n    ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\nTipp: Pakete regelmässig updaten mit z.B. update.packages()\n\n## Operatoren kennenlernen\n\n1.  a\\. Nutze R als Taschenrechner\n\n    1.  `123+456`\n\n    2.  `144*112`\n\n    3.  `10/3`\n\n    4.  Quadriere 420\n\n    5.  Ziehe die Quadratwurzel aus 146 mit der Funktion `sqrt()`\n\n    6.  Berechne den Rest der Division 10/3 mit dem Modulo Operator: `%%`\n\n### Arithmetische Operatoren und Funktionen in R, z.B.\n\n| Zeichen | Bedeutung                   |\n|---------|-----------------------------|\n| \\+      | Addition                    |\n| \\-      | Substraktion                |\n| \\*      | Multiplikation              |\n| /       | Division                    |\n| sqrt(x) | Quadratwurzel               |\n| abs(x)  | Betrag (absoluter Wert)     |\n| x %% y  | Modulo (x mod y) 5 %% 2 = 1 |\n| \\^      | Potenz                      |\n\n## Erste Zuweisungen/Variablen definieren\n\n1.  Weise den Wert 5 der Variable `x` zu mit dem Operator `<-`\n\n2.  Weise eine beliebige Zahl der Variable `y` zu und dividiere dann `x` durch `y`. Speichere dieses Ergebnis in der Variable `z`.\n\n3.  Schaue dir das Ergebnis in deinem Environment an. Lass dir das Ergebnis auch in der Konsole ausgeben. Das Environment findest du oben rechts, die Konsole ist unter deinem Skript.\n\n4.  Erstelle zwei Variablen: Eine mit deinem Vornamen und eine mit deinem Nachnamen. Solche \"character\" Variablen musst du in Anführungszeichen setzen `\"\"`\n\n5.  Kombiniere deinen Vor- und Nachnamen zu deinem vollen Namen mittels `paste` . Speichere diese Variable als `voller_name`.\n\n## Vektoren definieren\n\n1.  Definiere einen Vektor «first_vector» mit den Zahlen 100, 80, 54, 73. Einen Vektor definiert man so: `first_vector <- c(...)`\n\n2.  Wende den Befehl `boxplot()` auf deinen Vektor an\n\n3.  Berechne die Summe `sum()`und den Mittelwert `mean()` von deinem Vektor\n\n4.  Multipliziere deinen Vektor mit `*2` und schaue dir das Ergebnis an.\n\nDie wichtigsten Operatoren und Funktionen in R: <https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html>\n\n### Statistische Funktionen, die man auf Vektoren anwenden kann, z.B.\n\n| Funktion              | Bedeutung                 |\n|-----------------------|---------------------------|\n| mean(x, na.rm =FALSE) | Mittelwert                |\n| sd(x)                 | Standardabweichung        |\n| var(x)                | Varianz                   |\n| median(x)             | Median                    |\n| sum(x)                | Summe                     |\n| min(x)                | Minimalwert               |\n| max(x)                | Maximalwert               |\n| range(x)              | Minimal - und Maximalwert |\n\n## Logische Operatoren\n\n1.  Teste ob die Zahl 5 größer als 2 ist –\\> TRUE or FALSE?\n\n2.  Teste ob 6 ungleich 8 ist –\\> TRUE or FALSE?\n\n3.  Subtrahiere 80 von 50 und speichere das Ergebnis in einer Variable namens «diff_score».\n\n4.  Berechne mit `abs()` den absoluten Wert von «diff_score» lasse dir diesen mit `print(diff_score)` in der Konsole ausgeben.\n\n### Logische Operatoren, z.B.\n\n| Zeichen | Bedeutung      |\n|---------|----------------|\n| ==      | gleich         |\n| !=      | ungleich       |\n| \\>      | grösser        |\n| \\>=     | grösser gleich |\n| \\<      | kleiner        |\n| \\<=     | kleiner gleich |\n| \\|      | Logisches Oder |\n| &       | Logisches Und  |\n\n## Nachvollziehbarkeit von Code\n\n### Kommentare\n\nInformative Kommentare im Code sind elementar für die Nachvollziehbarkeit.\n\n1.  Schreibe einen Kommentar indem du ein `#` verwendest.\n\n2.  Code der nach einem `#` steht wird nicht ausgeführt. Setze ein `#` vor eine Codezeile und führe sie aus und beobachte was passiert.\n\n### Benennung von Variablen\n\nEs gibt verschiedene Konventionen, wie man Variablen benennen kann.\\\nEinige wichtige Grundsätze dafür sind:\n\n-   Namen können aus Buchstaben, Zahlen sowie den Zeichen `_` oder `.` bestehen.\n\n-   Sie müssen mit einem Buchstaben beginnen und dürfen keine Leerzeichen enthalten.\n\n-   Sonderzeichen und Großbuchstaben sollten vermieden werden.\n\n-   Keine Namen verwenden, die bereits für Funktionen reserviert sind (z. B. `mean()`).\n\n-   Der Name sollte den Inhalt der Variablen möglichst gut beschreiben → Reproduzierbarkeit; *clarity instead of brevity*.\n\n-   Am besten englische Bezeichnungen verwenden, um internationalen Standards zu folgen.\n\n👉 [Mehr dazu](https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html#variablennamen)\n\n**Übung:**\n\n-   Definiere eine neue Variable nach *snake_case*.\n\n-   Definiere eine zweite Variable nach *CamelCase*.\n\nIn unserem Seminar verwenden wir den *snake_case*.\n\n## Für fortgeschrittene R-Nutzer:innen\n\n1.  Speichere die beiden höchsten Werte aus «first_vector» in einer neuen Variable ab (Tipp: verwende `sort()` )\n\n2.  Erstelle einen Vektor mit Werten von 0-1000 in 10er Schritten (Tipp: suche nach der Funktion `seq()`\n\n3.  Ziehe zufällig eine Zahl aus diesem Vektor\n\n4.  Generiere einen Vektor, der aus 50 Wiederholungen der Zahl 3 besteht\n\nTipps zu diesen Aufgaben findest du bei Bedarf hier: <https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html> (Kapitel 2.1)\n\nTipp: Suche nach der Dokumentation der folgenden Funktionen: `sort(), seq(), sample, rep().`\n\nDie Dokumentation kannst du mittels `?Funktionsname` aufrufen.\n\n## Datentypen\n\n1.  **numeric vectors:** werden in integer (ganze Zahlen) und double (reelle Zahlen) unterteilt, z.B.\n\n    `numerical_vector <- c(1, 2.5, 4)`\n\n2.  **character vectors:** bestehen aus Zeichen, welche von Anführungszeichen umgeben werden, z.B.\n\n    `text_vector <- c(\"Hello\", \"World\")`\n\n3.  **logical vectors:** Elemente dieses Typs können nur 3 Werte annehmen: TRUE, FALSE oder NA\n\n    `log_vector <- c(TRUE, FALSE, TRUE)`\n\nVektoren müssen aus denselbsten Elementen bestehen, d.h. z.B. numeric und character können nicht gemischt werden. Vektoren werden meist mit `c()` erstellt.\n\n# Zusätzliche Übungen:\n\nℹ️ **Hinweis:** Hilfestellungen zu den Übungen findest du [hier](https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html#datentypen).\n\nNicht alle benötigten Funktionen sind explizit erwähnt. Nutze bei Bedarf eine Suchmaschine, um passende Befehle zu finden.\n\n**Überprüfen von Datentypen – palmerpenguins**\n\nLade den öffentlich in R verfügbaren Datensatz *palmerpenguins* mit den folgenden Befehlen:\n\n``` r\ninstall.packages(\"palmerpenguins\")   # nur einmal nötig \n```\n\n``` r\nlibrary(palmerpenguins) \nmy_penguins <- penguins \n```\n\n### Datensatz inspizieren\n\n-   Wie viele Variablen (Spalten) sind enthalten?\n\n-   Wie viele Beobachtungen (Zeilen)?\n\n### Überblick über den Datensatz\n\nNutze verschiedene Befehle und vergleiche die Ergebnisse:\n\nVerwende die Hilfefunktion `?funktionsname` um dir zeigen zu lassen welche Argumente die Funktionen benötigen.\n\n-   `head()`\n\n-   `glimpse()`\n\n-   `str()`\n\n-   `penguins`\n\n-   `summary()`\n\n👉 Was sind die Unterschiede zwischen den Befehlen?\n\n### Datentypen überprüfen\n\n-   Welchen Datentyp haben diese Variablen?\n\n    -   `island`\n\n    -   `body_mass_g`\n\n    -   `species`\n\n    Tipp: Googeln\n\n### Logisches Abfragen\n\n-   Überprüfe, ob `bill_depth_mm` ein numerischer Vektor ist.\n\n-   Gib die Antwort als logischen Wert aus (`TRUE` oder `FALSE`) und speichere sie in einer neuen Variable.\n\n-   Prüfe anschließend, ob diese neue Variable selbst ein logischer Vektor ist.\n\n# Am Ende deiner Übungen - vergiss nicht dein Skript abzuspeichern! :-)\n\nGib diesem einem Namen, der Maschinen und Mensch-lesbar ist, siehe Kapitel 6.1.3 hier: <https://r4ds.hadley.nz/workflow-scripts>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}