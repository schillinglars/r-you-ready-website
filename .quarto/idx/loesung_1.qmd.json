{"title":"Lösung 1","markdown":{"yaml":{"title":"Lösung 1"},"headingText":"Lösung - Codings Basics (Einheiten 1 und 2)","containsRefs":false,"markdown":"\n\n\nBei Bedarf finden sich hier nochmal die Slides zur EH1: <iframe src=\"EH_1.html\" width=\"100%\" height=\"500px\"></iframe>\n\n## Installation R und R-Studio\n\nInstalliere R und RStudio:\n\n1.  Installation von R – neueste Version 4.5.1: <https://stat.ethz.ch/CRAN/>\n\n2.  Installation von Rstudio (Version 2025.05.1): <https://posit.co/download/rstudio-desktop/>\n\nDu weisst nicht was mit R auf sich hat? Hier ist eine Kurzerklärung: <https://methodenlehre.github.io/einfuehrung-in-R/>\n\n## Einstellungen\n\n1.  RStudio öffnen & Einstellungen vornehmen: Unter «tools» –«global options» die **unter 1.1.** beschriebenen Einstellungen vornehmen: [https://methodenlehre.github.io/einfuehrung-in-R/chapters/01-workflow.html](#0){.uri}\n\n<!-- -->\n\n2.  Neues Skript öffnen & orientieren:\n\n## Hands on: Coding Basics\n\nIm folgenden machen wir uns vertraut mit der Oberfläche von R-Studio:\n\n![](images/R_overview.png){fig-align=\"center\"}\n\n<!-- -->\n\na)  Skript für Code-Eingabe sowie Kommentare\nb)  Konsole für die Ausführung von Code -\\> Teste einfache mathematische Operation in dieser; reproduziere diese mittels Skript\nc)  Rechts oben: Environment & History\nd)  Rechts unten: Files, Plots, Packages und Help Viewer\n\n## Pakete installieren und laden\n\nTidyverse ist ein Meta-Paket, das mehrere Pakete umfasst[![https://www.tidyverse.org/](images/clipboard-602781303.png){width=\"472\"}](https://www.tidyverse.org/)\n\n1.  Pakete installieren (nur 1x notwendig) -\\> führe diesen Code in der Konsole aus\n\n    ```{r}\n    #| eval: false\n    #| echo: TRUE\n\n    install.packages(\"tidyverse\")\n    ```\n\n2.  Paket laden (innerhalb des Skriptes, bei jedem Neustart von R notwendig)\n\n    ```{r}\n    #| echo: TRUE\n\n    library(tidyverse)\n    ```\n\nTipp: Pakete regelmässig updaten mit z.B. update.packages()\n\n### Operatoren kennenlernen\n\n1.  a\\. Nutze R als Taschenrechner\n\n    1.  `123+456`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n123 + 456\n```\n:::\n\n```         \n2.  `144*112`\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n144*112\n```\n:::\n\n```         \n3.  `10/3`\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n10/3\n```\n:::\n\n```         \n4.  Quadriere 420\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n420^2\n```\n:::\n\n```         \n5.  Ziehe die Quadratwurzel aus 146 mit der Funktion `sqrt()`\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nsqrt(146)\n```\n:::\n\n```         \n6.  Berechne den Rest der Division 10/3 mit dem Modulo Operator: `%%`\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n10 %% 3\n```\n:::\n\n#### Arithmetische Operatoren und Funktionen in R, z.B.\n\n| Zeichen | Bedeutung                   |\n|---------|-----------------------------|\n| \\+      | Addition                    |\n| \\-      | Substraktion                |\n| \\*      | Multiplikation              |\n| /       | Division                    |\n| sqrt(x) | Quadratwurzel               |\n| abs(x)  | Betrag (absoluter Wert)     |\n| x %% y  | Modulo (x mod y) 5 %% 2 = 1 |\n| \\^      | Potenz                      |\n\n### Erste Zuweisungen/Variablen definieren\n\n1.  Weise den Wert 5 der Variable `x` zu mit dem Operator `<-`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nx <- 5\n```\n:::\n\n2.  Weise eine beliebige Zahl der Variable `y` hinzu und dividiere dann `x` durch `y`. Speichere dieses Ergebnis in der Variable `z.`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\ny <- 10 # hier könntet ihr auch jede andere Ziffer wählen\n\nz <- x / y\n```\n:::\n\n3.  Schaue dir das Ergebnis in deinem Environment an. Lass dir das Ergebnis auch in der Konsole ausgeben. Das Environment findest du oben rechts, die Konsole ist unter deinem Skript.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n# z (hier über das # auskommentiert, da der Befehl nicht im Skript, sondern unten in der Konsole ausgeführt werden soll)\n```\n:::\n\n4.  Erstelle zwei Variablen: Eine mit deinem Vornamen und eine mit deinem Nachnamen. Solche \"character\" Variablen musst du in Anführungszeichen setzen `\"\"`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nvorname <- \"Lars\"\nnachname <- \"Schilling\"\n```\n:::\n\n5.  Kombiniere deinen Vor- und Nachnamen zu deinem vollen Namen mittels `paste` . Speichere diese Variable als `voller_name`.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nvoller_name <- paste(vorname, nachname)\n```\n:::\n\n### Vektoren definieren\n\n1.  Definiere einen Vektor «first_vector» mit den Zahlen 100, 80, 54, 73. Einen Vektor definiert man so: `first_vector <- c(...)`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nfirst_vector <- c(100, 80, 54, 73)\n```\n:::\n\n2.  Wende den Befehl `boxplot()` auf deinen Vektor an\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nboxplot(first_vector)\n```\n:::\n\n3.  Berechne die Summe `sum()`und den Mittelwert `mean()` von deinem Vektor\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nsum(first_vector)\n\nmean(first_vector)\n```\n:::\n\n4.  Multipliziere deinen Vektor mit `*2`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nfirst_vector * 2\n```\n:::\n\nDie wichtigsten Operatoren und Funktionen in R: <https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html>\n\n#### Statistische Funktionen, die man auf Vektoren anwenden kann, z.B.\n\n| Funktion              | Bedeutung                 |\n|-----------------------|---------------------------|\n| mean(x, na.rm =FALSE) | Mittelwert                |\n| sd(x)                 | Standardabweichung        |\n| var(x)                | Varianz                   |\n| median(x)             | Median                    |\n| sum(x)                | Summe                     |\n| min(x)                | Minimalwert               |\n| max(x)                | Maximalwert               |\n| range(x)              | Minimal - und Maximalwert |\n\n### Logische Operatoren\n\n1.  Teste ob die Zahl 5 größer als 2 ist –\\> TRUE or FALSE?\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n5 > 2\n```\n\nTRUE, 5 ist grösser als 2.\n:::\n\n2.  Teste ob 6 ungleich 8 ist –\\> TRUE or FALSE?\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n6!=8\n```\n\nTRUE, 6 und 8 sind ungleich.\n:::\n\n3.  Subtrahiere 80 von 50 und speichere das Ergebnis in einer Variable namens «diff_score».\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\ndiff_score <- 80 - 50\n```\n:::\n\n4.  Berechne mit `abs()` den absoluten Wert von «diff_score» lassen dir diesen mit `print(diff_score)` in der Konsole ausgeben.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\ndiff_score_abs <- abs(diff_score)\n\n# print(diff_score_abs) (hier erneut mit # auskommentiert, da der Befehl nicht im Skript, sondern in der Console ausgeführt werden soll)\n```\n:::\n\n#### Logische Operatoren, z.B.\n\n| Zeichen | Bedeutung      |\n|---------|----------------|\n| ==      | gleich         |\n| !=      | ungleich       |\n| \\>      | grösser        |\n| \\>=     | grösser gleich |\n| \\<      | kleiner        |\n| \\<=     | kleiner gleich |\n| \\|      | Logisches Oder |\n| &       | Logisches Und  |\n\n## Nachvollziehbarkeit von Code\n\n### Kommentare\n\nInformative Kommentare im Code sind elementar für die Nachvollziehbarkeit.\n\n1.  Schreibe einen Kommentar indem du ein `#` verwendest.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n# Hier ein Beipsiel für einen Kommentar, wie auch schon weiter oben mehrmals verwendet um die Lösungen davon zu hindern ausgeführt zu werden.\n```\n:::\n\n2.  Code der nach einem `#` steht wird nicht ausgeführt. Setze ein `#` vor eine Codezeile und führe sie aus und beobachte was passiert.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n# 1 + 2\n```\n:::\n\n### Benennung von Variablen\n\nEs gibt verschiedene Konventionen wie man Variablen bennen kann:\n\n<https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html#variablennamen>\n\n1.  Definiere eine neue Variable nach snake_case\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nneue_variable <- \"snake_case\"\n```\n:::\n\n2.  Definiere eine zweite Variable nach CamelCase\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nneueVariable <- \"CamelCase\"\n```\n:::\n\n## Für fortgeschrittene R-Nutzer:innen\n\n1.  Speichere die beiden höchsten Werte aus «first_vector» in einer neuen Variable ab.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\ntop_two <- sort(first_vector, decreasing = TRUE)[1:2]\n```\n:::\n\n2.  Erstelle einen Vektor mit Werten von 0-1000 in 10er Schritten.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nvec_seq <- seq(from = 1, to = 1000, by = 10)\n```\n:::\n\n3.  Ziehe zufällig eine Zahl aus diesem Vektor\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nsample(vec_seq, 1)\n```\n:::\n\n4.  Generiere einen Vektor, der aus 50 Wiederholungen der Zahl 3 besteht.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nmy_vector <- rep(3, times = 50)\n```\n:::\n\nTipps zu diesen Aufgaben findest du bei Bedarf hier: <https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html> (Kapitel 2.1)\n\n## Datentypen\n\n1.  **numeric vectors:** werden in integer (ganze Zahlen) und double (reelle Zahlen) unterteilt, z.B.\n\n    `numerical_vector <- c(1, 2.5, 4)`\n\n2.  **character vectors:** bestehen aus Zeichen, welche von Anführungszeichen umgeben werden, z.B.\n\n    `text_vector <- c(\"Hello\", \"World\")`\n\n3.  **logical vectors:** Elemente dieses Typs können nur 3 Werte annehmen: TRUE, FALSE oder NA\n\n    `log_vector <- c(TRUE, FALSE, TRUE)`\n\nVektoren müssen aus denselbsten Elementen bestehen, d.h. z.B. numeric und character können nicht gemischt werden. Vektoren werden meist mit `c()` erstellt.\n\n# Zusätzliche Übungen:\n\nℹ️ **Hinweis:** Hilfestellungen zu den Übungen findest du [hier](https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html#datentypen).\n\nNicht alle benötigten Funktionen sind explizit erwähnt. Nutze bei Bedarf eine Suchmaschine, um passende Befehle zu finden.\n\n**Überprüfen von Datentypen – palmerpenguins**\n\nLade den öffentlich in R verfügbaren Datensatz *palmerpenguins* mit den folgenden Befehlen:\n\n``` r\ninstall.packages(\"palmerpenguins\")   # nur einmal nötig \n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n# install.packages(\"palmerpenguins\")   # nur einmal nötig # führe diesen Code in der Console aus\n```\n:::\n\n``` r\nlibrary(palmerpenguins) \nmy_penguins <- penguins \n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nlibrary(palmerpenguins) \nmy_penguins <- penguins\n```\n:::\n\n### Datensatz inspizieren\n\n-   Wie viele Variablen (Spalten) sind enthalten?\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nncol(my_penguins)\n```\n:::\n\n-   Wie viele Beobachtungen (Zeilen)?\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nnrow(my_penguins)\n```\n:::\n\n### Überblick über den Datensatz\n\nNutze verschiedene Befehle und vergleiche die Ergebnisse:\n\nVerwende die Hilfefunktion `?funktionsname` um dir zeigen zu lassen welche Argumente die Funktionen benötigen.\n\n-   `head()`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n?head() # um die Hilfeseite zu öffnen\nhead(my_penguins)\n```\n:::\n\n-   `glimpse()`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n?glimpse() # um die Hilfeseite zu öffnen\nglimpse(my_penguins)\n```\n:::\n\n-   `str()`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n?str() # um die Hilfeseite zu öffnen\nstr(my_penguins)\n```\n:::\n\n-   `penguins`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n# ist keine Funktion sondern ein Datensatz und daher gibt es hierfür auch keine Hilfeseite\npenguins\n```\n:::\n\n-   `summary()`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n?summary() # um die Hilfeseite zu öffnen\nsummary(my_penguins)\n```\n:::\n\n👉 Was sind die Unterschiede zwischen den Befehlen?\n\nAlle der Befehle sind dafür geeignet einen ersten schnellen Überblick über den Datensatz zu erhalten. `head()` gibt die ersten paar (Standardmässig 6) Zeilen des Datensatzes aus. `glimpse()` gibt für jede Spalte den Namen, Typ und ihren ersten Wert aus. `str()` gibt einen Überblick über die Dimensionen des Datensatzes, wie Anzahl an Spalten, Anzahl an Zeilen und über die Datentypen. `summary()` gibt eine statistische Zusammenfassung des Datensatzes, wie beispielsweise bei numerischen Variablen den minimalen Wert, maximalen Wert, Median und Mean oder bei faktoriellen Variablen die Anzahl an Faktorstufen und ihrer entsprechenden Häufigkeit. Mit `penguins` allein wird einfach das entsprechende Objekt aufgerufen (hier handelt es sich nicht um eine Funktion).\n\n### Datentypen überprüfen\n\n-   Welchen Datentyp haben diese Variablen?\n\n    -   `island`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nclass(my_penguins$island)\n```\n:::\n\n`island`hat den Datentyp *factor*.\n\n```         \n-   `body_mass_g`\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nclass(my_penguins$body_mass_g)\n```\n:::\n\n`body_mass_g`hat den Datentyp *integer*.\n\n```         \n-   `species`\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nclass(my_penguins$species)\n```\n:::\n\n`species` hat den Datentyp *factor*.\n\n```         \nTipp: Googeln\n```\n\n::: {.callout-note collapse=\"true\" title=\"Vertiefung\"}\nIhr hättet die Datentypen aus den vorherigen Aufgaben auch mit folgendem Code lösen können:\n\n```{r}\ntypeof(my_penguins$island)\ntypeof(my_penguins$body_mass_g)\ntypeof(my_penguins$species)\n```\n\nWie die Funktion `class()` lässt sich auch mit der Funktion `typeof()` der Datentyp einer Spalte abfragen. Allerdings unterscheiden sich die beiden Funktionen darin, **welche Information sie liefern**, und dementsprechend auch in ihren Ausgaben.\n\nDie Funktion `class()` gibt an, **welcher Klasse ein Objekt in R zugeordnet ist** – also, wie es sich in Funktionen und Methoden verhalten soll. Beispiele für Klassen sind `numeric`, `character`, `factor` oder `data.frame`.\n\nDie Funktion `typeof()` hingegen zeigt an, **welcher grundlegende Datentyp intern im Speicher verwendet wird**, um das Objekt zu repräsentieren. Für Objekte vom Typ `numeric` oder `character` liefern `class()` und `typeof()` in der Regel identische Ergebnisse. Bei einem `factor`-Objekt unterscheiden sich die Ausgaben jedoch: `class()` gibt `\"factor\"` zurück, während `typeof()` `\"integer\"` liefert, da Faktoren intern als Ganzzahlen mit zugehörigen Levels gespeichert werden. Wir empfehlen dir daher die Funktion `class` zu verwenden, da wir uns im Rahmen des Seminars dafür interessieren welcher Klasse ein Objekt in R zugeordnet ist. [Hier](https://mgimond.github.io/ES218/data_objects.html#:~:text=An%20R%20object's%20data%20type,not%20distinguish%20integers%20from%20doubles.) kannst du noch eine genauere Erklärung dazu finden welche grundlegende Datentypen im internen Speicher verwendet werden und wo der Unterschied herkommt.\n:::\n\n### Logisches Abfragen\n\n-   Überprüfe, ob `bill_depth_mm` ein numerischer Vektor ist.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nis.numeric(my_penguins$bill_depth_mm)\n```\n:::\n\n-   Gib die Antwort als logischen Wert aus (`TRUE` oder `FALSE`) und speichere sie in einer neuen Variable.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nspecies_numeric <- is.numeric(my_penguins$bill_depth_mm) # der genaue Name der Variable sollte im snake_case geschrieben sein und über den Inhalt informieren. Ansonsten ist er arbiträr\n```\n:::\n\n-   Prüfe anschließend, ob diese neue Variable selbst ein logischer Vektor ist.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nis.logical(species_numeric) # hier müsst ihr als Argument natürlich den von euch eben vergebenen Variablennamen auswählen\n```\n:::\n\n# Am Ende deiner Übungen - vergiss nicht dein Skript abzuspeichern! :-)\n\nGib diesem einem Namen, der Maschinen und Mensch-lesbar ist, siehe Kapitel 6.1.3 hier: <https://r4ds.hadley.nz/workflow-scripts>\n","srcMarkdownNoYaml":"\n\n# Lösung - Codings Basics (Einheiten 1 und 2)\n\nBei Bedarf finden sich hier nochmal die Slides zur EH1: <iframe src=\"EH_1.html\" width=\"100%\" height=\"500px\"></iframe>\n\n## Installation R und R-Studio\n\nInstalliere R und RStudio:\n\n1.  Installation von R – neueste Version 4.5.1: <https://stat.ethz.ch/CRAN/>\n\n2.  Installation von Rstudio (Version 2025.05.1): <https://posit.co/download/rstudio-desktop/>\n\nDu weisst nicht was mit R auf sich hat? Hier ist eine Kurzerklärung: <https://methodenlehre.github.io/einfuehrung-in-R/>\n\n## Einstellungen\n\n1.  RStudio öffnen & Einstellungen vornehmen: Unter «tools» –«global options» die **unter 1.1.** beschriebenen Einstellungen vornehmen: [https://methodenlehre.github.io/einfuehrung-in-R/chapters/01-workflow.html](#0){.uri}\n\n<!-- -->\n\n2.  Neues Skript öffnen & orientieren:\n\n## Hands on: Coding Basics\n\nIm folgenden machen wir uns vertraut mit der Oberfläche von R-Studio:\n\n![](images/R_overview.png){fig-align=\"center\"}\n\n<!-- -->\n\na)  Skript für Code-Eingabe sowie Kommentare\nb)  Konsole für die Ausführung von Code -\\> Teste einfache mathematische Operation in dieser; reproduziere diese mittels Skript\nc)  Rechts oben: Environment & History\nd)  Rechts unten: Files, Plots, Packages und Help Viewer\n\n## Pakete installieren und laden\n\nTidyverse ist ein Meta-Paket, das mehrere Pakete umfasst[![https://www.tidyverse.org/](images/clipboard-602781303.png){width=\"472\"}](https://www.tidyverse.org/)\n\n1.  Pakete installieren (nur 1x notwendig) -\\> führe diesen Code in der Konsole aus\n\n    ```{r}\n    #| eval: false\n    #| echo: TRUE\n\n    install.packages(\"tidyverse\")\n    ```\n\n2.  Paket laden (innerhalb des Skriptes, bei jedem Neustart von R notwendig)\n\n    ```{r}\n    #| echo: TRUE\n\n    library(tidyverse)\n    ```\n\nTipp: Pakete regelmässig updaten mit z.B. update.packages()\n\n### Operatoren kennenlernen\n\n1.  a\\. Nutze R als Taschenrechner\n\n    1.  `123+456`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n123 + 456\n```\n:::\n\n```         \n2.  `144*112`\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n144*112\n```\n:::\n\n```         \n3.  `10/3`\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n10/3\n```\n:::\n\n```         \n4.  Quadriere 420\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n420^2\n```\n:::\n\n```         \n5.  Ziehe die Quadratwurzel aus 146 mit der Funktion `sqrt()`\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nsqrt(146)\n```\n:::\n\n```         \n6.  Berechne den Rest der Division 10/3 mit dem Modulo Operator: `%%`\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n10 %% 3\n```\n:::\n\n#### Arithmetische Operatoren und Funktionen in R, z.B.\n\n| Zeichen | Bedeutung                   |\n|---------|-----------------------------|\n| \\+      | Addition                    |\n| \\-      | Substraktion                |\n| \\*      | Multiplikation              |\n| /       | Division                    |\n| sqrt(x) | Quadratwurzel               |\n| abs(x)  | Betrag (absoluter Wert)     |\n| x %% y  | Modulo (x mod y) 5 %% 2 = 1 |\n| \\^      | Potenz                      |\n\n### Erste Zuweisungen/Variablen definieren\n\n1.  Weise den Wert 5 der Variable `x` zu mit dem Operator `<-`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nx <- 5\n```\n:::\n\n2.  Weise eine beliebige Zahl der Variable `y` hinzu und dividiere dann `x` durch `y`. Speichere dieses Ergebnis in der Variable `z.`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\ny <- 10 # hier könntet ihr auch jede andere Ziffer wählen\n\nz <- x / y\n```\n:::\n\n3.  Schaue dir das Ergebnis in deinem Environment an. Lass dir das Ergebnis auch in der Konsole ausgeben. Das Environment findest du oben rechts, die Konsole ist unter deinem Skript.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n# z (hier über das # auskommentiert, da der Befehl nicht im Skript, sondern unten in der Konsole ausgeführt werden soll)\n```\n:::\n\n4.  Erstelle zwei Variablen: Eine mit deinem Vornamen und eine mit deinem Nachnamen. Solche \"character\" Variablen musst du in Anführungszeichen setzen `\"\"`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nvorname <- \"Lars\"\nnachname <- \"Schilling\"\n```\n:::\n\n5.  Kombiniere deinen Vor- und Nachnamen zu deinem vollen Namen mittels `paste` . Speichere diese Variable als `voller_name`.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nvoller_name <- paste(vorname, nachname)\n```\n:::\n\n### Vektoren definieren\n\n1.  Definiere einen Vektor «first_vector» mit den Zahlen 100, 80, 54, 73. Einen Vektor definiert man so: `first_vector <- c(...)`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nfirst_vector <- c(100, 80, 54, 73)\n```\n:::\n\n2.  Wende den Befehl `boxplot()` auf deinen Vektor an\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nboxplot(first_vector)\n```\n:::\n\n3.  Berechne die Summe `sum()`und den Mittelwert `mean()` von deinem Vektor\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nsum(first_vector)\n\nmean(first_vector)\n```\n:::\n\n4.  Multipliziere deinen Vektor mit `*2`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nfirst_vector * 2\n```\n:::\n\nDie wichtigsten Operatoren und Funktionen in R: <https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html>\n\n#### Statistische Funktionen, die man auf Vektoren anwenden kann, z.B.\n\n| Funktion              | Bedeutung                 |\n|-----------------------|---------------------------|\n| mean(x, na.rm =FALSE) | Mittelwert                |\n| sd(x)                 | Standardabweichung        |\n| var(x)                | Varianz                   |\n| median(x)             | Median                    |\n| sum(x)                | Summe                     |\n| min(x)                | Minimalwert               |\n| max(x)                | Maximalwert               |\n| range(x)              | Minimal - und Maximalwert |\n\n### Logische Operatoren\n\n1.  Teste ob die Zahl 5 größer als 2 ist –\\> TRUE or FALSE?\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n5 > 2\n```\n\nTRUE, 5 ist grösser als 2.\n:::\n\n2.  Teste ob 6 ungleich 8 ist –\\> TRUE or FALSE?\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n6!=8\n```\n\nTRUE, 6 und 8 sind ungleich.\n:::\n\n3.  Subtrahiere 80 von 50 und speichere das Ergebnis in einer Variable namens «diff_score».\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\ndiff_score <- 80 - 50\n```\n:::\n\n4.  Berechne mit `abs()` den absoluten Wert von «diff_score» lassen dir diesen mit `print(diff_score)` in der Konsole ausgeben.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\ndiff_score_abs <- abs(diff_score)\n\n# print(diff_score_abs) (hier erneut mit # auskommentiert, da der Befehl nicht im Skript, sondern in der Console ausgeführt werden soll)\n```\n:::\n\n#### Logische Operatoren, z.B.\n\n| Zeichen | Bedeutung      |\n|---------|----------------|\n| ==      | gleich         |\n| !=      | ungleich       |\n| \\>      | grösser        |\n| \\>=     | grösser gleich |\n| \\<      | kleiner        |\n| \\<=     | kleiner gleich |\n| \\|      | Logisches Oder |\n| &       | Logisches Und  |\n\n## Nachvollziehbarkeit von Code\n\n### Kommentare\n\nInformative Kommentare im Code sind elementar für die Nachvollziehbarkeit.\n\n1.  Schreibe einen Kommentar indem du ein `#` verwendest.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n# Hier ein Beipsiel für einen Kommentar, wie auch schon weiter oben mehrmals verwendet um die Lösungen davon zu hindern ausgeführt zu werden.\n```\n:::\n\n2.  Code der nach einem `#` steht wird nicht ausgeführt. Setze ein `#` vor eine Codezeile und führe sie aus und beobachte was passiert.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n# 1 + 2\n```\n:::\n\n### Benennung von Variablen\n\nEs gibt verschiedene Konventionen wie man Variablen bennen kann:\n\n<https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html#variablennamen>\n\n1.  Definiere eine neue Variable nach snake_case\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nneue_variable <- \"snake_case\"\n```\n:::\n\n2.  Definiere eine zweite Variable nach CamelCase\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nneueVariable <- \"CamelCase\"\n```\n:::\n\n## Für fortgeschrittene R-Nutzer:innen\n\n1.  Speichere die beiden höchsten Werte aus «first_vector» in einer neuen Variable ab.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\ntop_two <- sort(first_vector, decreasing = TRUE)[1:2]\n```\n:::\n\n2.  Erstelle einen Vektor mit Werten von 0-1000 in 10er Schritten.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nvec_seq <- seq(from = 1, to = 1000, by = 10)\n```\n:::\n\n3.  Ziehe zufällig eine Zahl aus diesem Vektor\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nsample(vec_seq, 1)\n```\n:::\n\n4.  Generiere einen Vektor, der aus 50 Wiederholungen der Zahl 3 besteht.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nmy_vector <- rep(3, times = 50)\n```\n:::\n\nTipps zu diesen Aufgaben findest du bei Bedarf hier: <https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html> (Kapitel 2.1)\n\n## Datentypen\n\n1.  **numeric vectors:** werden in integer (ganze Zahlen) und double (reelle Zahlen) unterteilt, z.B.\n\n    `numerical_vector <- c(1, 2.5, 4)`\n\n2.  **character vectors:** bestehen aus Zeichen, welche von Anführungszeichen umgeben werden, z.B.\n\n    `text_vector <- c(\"Hello\", \"World\")`\n\n3.  **logical vectors:** Elemente dieses Typs können nur 3 Werte annehmen: TRUE, FALSE oder NA\n\n    `log_vector <- c(TRUE, FALSE, TRUE)`\n\nVektoren müssen aus denselbsten Elementen bestehen, d.h. z.B. numeric und character können nicht gemischt werden. Vektoren werden meist mit `c()` erstellt.\n\n# Zusätzliche Übungen:\n\nℹ️ **Hinweis:** Hilfestellungen zu den Übungen findest du [hier](https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html#datentypen).\n\nNicht alle benötigten Funktionen sind explizit erwähnt. Nutze bei Bedarf eine Suchmaschine, um passende Befehle zu finden.\n\n**Überprüfen von Datentypen – palmerpenguins**\n\nLade den öffentlich in R verfügbaren Datensatz *palmerpenguins* mit den folgenden Befehlen:\n\n``` r\ninstall.packages(\"palmerpenguins\")   # nur einmal nötig \n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n# install.packages(\"palmerpenguins\")   # nur einmal nötig # führe diesen Code in der Console aus\n```\n:::\n\n``` r\nlibrary(palmerpenguins) \nmy_penguins <- penguins \n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nlibrary(palmerpenguins) \nmy_penguins <- penguins\n```\n:::\n\n### Datensatz inspizieren\n\n-   Wie viele Variablen (Spalten) sind enthalten?\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nncol(my_penguins)\n```\n:::\n\n-   Wie viele Beobachtungen (Zeilen)?\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nnrow(my_penguins)\n```\n:::\n\n### Überblick über den Datensatz\n\nNutze verschiedene Befehle und vergleiche die Ergebnisse:\n\nVerwende die Hilfefunktion `?funktionsname` um dir zeigen zu lassen welche Argumente die Funktionen benötigen.\n\n-   `head()`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n?head() # um die Hilfeseite zu öffnen\nhead(my_penguins)\n```\n:::\n\n-   `glimpse()`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n?glimpse() # um die Hilfeseite zu öffnen\nglimpse(my_penguins)\n```\n:::\n\n-   `str()`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n?str() # um die Hilfeseite zu öffnen\nstr(my_penguins)\n```\n:::\n\n-   `penguins`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n# ist keine Funktion sondern ein Datensatz und daher gibt es hierfür auch keine Hilfeseite\npenguins\n```\n:::\n\n-   `summary()`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\n?summary() # um die Hilfeseite zu öffnen\nsummary(my_penguins)\n```\n:::\n\n👉 Was sind die Unterschiede zwischen den Befehlen?\n\nAlle der Befehle sind dafür geeignet einen ersten schnellen Überblick über den Datensatz zu erhalten. `head()` gibt die ersten paar (Standardmässig 6) Zeilen des Datensatzes aus. `glimpse()` gibt für jede Spalte den Namen, Typ und ihren ersten Wert aus. `str()` gibt einen Überblick über die Dimensionen des Datensatzes, wie Anzahl an Spalten, Anzahl an Zeilen und über die Datentypen. `summary()` gibt eine statistische Zusammenfassung des Datensatzes, wie beispielsweise bei numerischen Variablen den minimalen Wert, maximalen Wert, Median und Mean oder bei faktoriellen Variablen die Anzahl an Faktorstufen und ihrer entsprechenden Häufigkeit. Mit `penguins` allein wird einfach das entsprechende Objekt aufgerufen (hier handelt es sich nicht um eine Funktion).\n\n### Datentypen überprüfen\n\n-   Welchen Datentyp haben diese Variablen?\n\n    -   `island`\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nclass(my_penguins$island)\n```\n:::\n\n`island`hat den Datentyp *factor*.\n\n```         \n-   `body_mass_g`\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nclass(my_penguins$body_mass_g)\n```\n:::\n\n`body_mass_g`hat den Datentyp *integer*.\n\n```         \n-   `species`\n```\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nclass(my_penguins$species)\n```\n:::\n\n`species` hat den Datentyp *factor*.\n\n```         \nTipp: Googeln\n```\n\n::: {.callout-note collapse=\"true\" title=\"Vertiefung\"}\nIhr hättet die Datentypen aus den vorherigen Aufgaben auch mit folgendem Code lösen können:\n\n```{r}\ntypeof(my_penguins$island)\ntypeof(my_penguins$body_mass_g)\ntypeof(my_penguins$species)\n```\n\nWie die Funktion `class()` lässt sich auch mit der Funktion `typeof()` der Datentyp einer Spalte abfragen. Allerdings unterscheiden sich die beiden Funktionen darin, **welche Information sie liefern**, und dementsprechend auch in ihren Ausgaben.\n\nDie Funktion `class()` gibt an, **welcher Klasse ein Objekt in R zugeordnet ist** – also, wie es sich in Funktionen und Methoden verhalten soll. Beispiele für Klassen sind `numeric`, `character`, `factor` oder `data.frame`.\n\nDie Funktion `typeof()` hingegen zeigt an, **welcher grundlegende Datentyp intern im Speicher verwendet wird**, um das Objekt zu repräsentieren. Für Objekte vom Typ `numeric` oder `character` liefern `class()` und `typeof()` in der Regel identische Ergebnisse. Bei einem `factor`-Objekt unterscheiden sich die Ausgaben jedoch: `class()` gibt `\"factor\"` zurück, während `typeof()` `\"integer\"` liefert, da Faktoren intern als Ganzzahlen mit zugehörigen Levels gespeichert werden. Wir empfehlen dir daher die Funktion `class` zu verwenden, da wir uns im Rahmen des Seminars dafür interessieren welcher Klasse ein Objekt in R zugeordnet ist. [Hier](https://mgimond.github.io/ES218/data_objects.html#:~:text=An%20R%20object's%20data%20type,not%20distinguish%20integers%20from%20doubles.) kannst du noch eine genauere Erklärung dazu finden welche grundlegende Datentypen im internen Speicher verwendet werden und wo der Unterschied herkommt.\n:::\n\n### Logisches Abfragen\n\n-   Überprüfe, ob `bill_depth_mm` ein numerischer Vektor ist.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nis.numeric(my_penguins$bill_depth_mm)\n```\n:::\n\n-   Gib die Antwort als logischen Wert aus (`TRUE` oder `FALSE`) und speichere sie in einer neuen Variable.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nspecies_numeric <- is.numeric(my_penguins$bill_depth_mm) # der genaue Name der Variable sollte im snake_case geschrieben sein und über den Inhalt informieren. Ansonsten ist er arbiträr\n```\n:::\n\n-   Prüfe anschließend, ob diese neue Variable selbst ein logischer Vektor ist.\n\n::: {.callout-note collapse=\"true\" title=\"Lösung\"}\n```{r}\nis.logical(species_numeric) # hier müsst ihr als Argument natürlich den von euch eben vergebenen Variablennamen auswählen\n```\n:::\n\n# Am Ende deiner Übungen - vergiss nicht dein Skript abzuspeichern! :-)\n\nGib diesem einem Namen, der Maschinen und Mensch-lesbar ist, siehe Kapitel 6.1.3 hier: <https://r4ds.hadley.nz/workflow-scripts>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":true,"css":["styles/website_styles.css"],"output-file":"loesung_1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":"cosmo","toc-location":"right","toc-title":"Inhaltsverzeichnis","title":"Lösung 1"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}