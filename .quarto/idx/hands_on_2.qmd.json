{"title":"Hands_On_2","markdown":{"yaml":{"title":"Hands_On_2","editor":"visual"},"headingText":"Hands On ‚Äì Coding Basics (Einheiten 2 und 3)","containsRefs":false,"markdown":"\n\n\n3te: projekte, einleksen und matrizen und listen.\n\nmatitzen vs. listen vs. dfs.\n\n4te einheit: mergen\n\nBei Bedarf findest du hier nochmals die Slides zu Einheit 3:\\\n<iframe src=\"EH_3.html\" width=\"100%\" height=\"500px\"></iframe>\n\n## Lernziele dieses Hands-On-Blocks\n\n-   **Verstehen von Pfaden und Projekten:**\n\n    -   Relativ vs. Absolut\n    -   Projekte\n\n-   **Coding Basics:**\n\n    -   Daten einlesen\n    -   Daten exportieren\n    -   Datens√§tze mergen (zusammenf√ºgen)\n        -   Vor- und Nachteile verschiedener Funktionen kennenlernen (Wann brauche ich welche Funktion?)\n\n-   Liste und Matrizen\n\n    -   \n\n# Projekte und Pfade\n\n### Was sind R-Projekte?\n\nüëâ [Kapitel 6.2 R4DS](https://r4ds.hadley.nz/workflow-scripts.html#projects)\n\nEin **R-Projekt** ist eine Projektdatei (`.Rproj`), die du in RStudio anlegst.\\\nWenn du ein Projekt √∂ffnest:\n\n-   RStudio setzt automatisch das **Working Directory (Arbeitsverzeichnis)** auf den Ordner, in dem die `.Rproj` liegt.\\\n-   Alle Dateien, Skripte, Daten und Ergebnisse, die du in diesem Ordner ablegst, geh√∂ren logisch zu diesem Projekt.\\\n-   Man kann es sich vorstellen wie einen ‚ÄûContainer‚Äú f√ºr ein Forschungsprojekt, eine Hausarbeit oder ein Analysepaket.\\\n-   Du kannst entweder ein neues Projekt erstellen oder ein bestehendes Projekt √∂ffnen.\n\nüëâ In RStudio siehst du oben rechts, in welchem Projekt du dich gerade befindest.\n\n![](images/EH3/Project.png)\n\n**√úbung:**\\\nIm Ordner *grinschgl2020* liegt bereits eine `.Rproj`-Datei. √ñffne sie und √ºberpr√ºfe oben rechts in RStudio, ob du dich im richtigen Projekt befindest.\n\n------------------------------------------------------------------------\n\n### Absolute vs. relative Pfade\n\n-   **Absolute Pfade** beschreiben den vollst√§ndigen Weg zu einer Datei, ausgehend vom Wurzelverzeichnis deines Computers.\n    -   Nachteil: Sie sind oft sehr lang und funktionieren nur auf deinem Rechner.\\\n    -   Beispiel (Windows):\\\n        `C:\\Users\\maxmustermann\\Dokumente\\r_you_ready\\Grinschgl2020\\data\\raw\\Beispieldatei.csv`\n-   **Relative Pfade** beschreiben den Ort einer Datei relativ zum aktuellen Working Directory.\n    -   Vorteil: Sie sind k√ºrzer und funktionieren auf jedem Rechner, solange die Projektstruktur gleich bleibt.\\\n\n    -   Beispiel:\n\n        -   Projektordner = *Grinschgl2020*\\\n        -   Datei liegt in *data/raw/Beispieldatei.csv*\\\n        -   relativer Pfad:\\\n\n        ```         \n        data/raw/Beispieldatei.csv\n        ```\n\n# Daten importieren und exportieren\n\n## Import\n\nüëâ [Kapitel 3.2](https://methodenlehre.github.io/einfuehrung-in-R/chapters/03-data_frames.html#daten-importieren)\n\n### Einlesen via Oberfl√§che\n\n-   Stelle sicher, dass du das Metapaket **tidyverse** geladen hast (siehe Hands-On 1).\\\n    Wir verwenden Funktionen aus den Packages **readr** und **readxl**, die Teil des Tidyverse sind.\n\n-   Importiere die Datei `\"data_mmq.csv\"` √ºber die Point-Click-Oberfl√§che von RStudio.\n\n    -   Tipp: Klicke auf **Environment** ‚Üí **Import Dataset** ‚Üí w√§hle `\"readr\"`-Funktion.\n    -   Schaue dir den Datensatz an: Mit welchem Trennzeichen sind die Daten getrennt?\n        -   Stelle in der Oberfl√§che `\"Delimiter\"` auf das passende Trennzeichen. Was ver√§ndert sich?\n    -   Betrachte den Code, den die Oberfl√§che generiert. Versuche den Pfad im Kontext von Projekten zu verstehen.\n    -   Schaue dir die eingelesenen Daten mit `view(data_mmq)` an.\n\n### Einlesen via Code\n\nXXXXX Namen updaten.\n\n-   Versuche, weitere CSV-Datens√§tze einzulesen: `cbt_prop`, `cvstm_prop`, `data_pct`, `vp_prop`.\\\n    Suche daf√ºr eine geeignete Funktion zum Einlesen von `.csv`.\n\n-   XXXXX Korrigiere diesen Code.\n\n-   Korrigiere diesen Code und lies damit die Datei `vp_prop` ein:\n\n-   Einige Dateien liegen im `.xlsx`-Format.\n\n    -   Verwende daf√ºr das Paket **readxl** und die Funktion `read_excel()`.\n    -   Nutze die Hilfefunktion (`?read_excel`) f√ºr Infos.\n    -   Versuche, die Datens√§tze `data_ratings` und `data_strategies` einzulesen.\n\n-   Am Ende solltest du **7 verschiedene Datens√§tze** in deinem Environment sehen.\n\n## Datens√§tze inspizieren\n\nVerschaffe dir eine √úbersicht √ºber die Datens√§tze, verwende dabei die verschiedenen Funktionen die wir daf√ºr bereits im Hands-on 1 kenengelernt haben:\n\n-   `head()`\n\n-   `glimpse()`\n\n-   `str()`\n\n-   `data_cbt`\n\n-   `summary()`\n\n![](images/clipboard-558025012.png)\n\n# Datenstrukturen: Vektoren, Listen, Matrizen und Data Frames\n\nBevor wir mit den √úbungen starten, ein √úberblick √ºber die Unterschiede:\n\n| Struktur | Eigenschaften | Beispiel-Inhalt |\n|----------------|----------------------------------|-----------------------|\n| **Vektor** | \\- Enth√§lt Elemente **eines** Datentyps<br>- Grundbaustein in R | `c(1, 2, 3)` oder `c(\"Anna\", \"Ben\")` |\n| **Liste** | \\- Kann verschiedene Datentypen enthalten<br>- Elemente k√∂nnen unterschiedlich lang sein | Zahlenvektor, Textvektor, logischer Vektor in einer Liste |\n| **Matrix** | \\- Enth√§lt nur **einen** Datentyp<br>- Hat feste Dimensionen (Zeilen, Spalten) | 3x3-Matrix mit Zahlen 1‚Äì9 |\n| **Data Frame** | \\- Tabellarisch aufgebaut<br>- Spalten k√∂nnen unterschiedliche Datentypen enthalten<br>- Jede Spalte gleich lang | Tabelle mit Name (Char), Alter (Numeric), Studiert (Logical) |\n\nüëâ Merksatz:\\\n- **Vektor** = einfachste Struktur, ein Datentyp\\\n- **Liste** = flexibel, verschiedene Datentypen\\\n- **Matrix** = ‚ÄûZahlenrechteck‚Äú, ein Datentyp\\\n- **Data Frame** = Tabelle, Spalten k√∂nnen unterschiedliche Datentypen haben\n\nWir haben in der Hands on √úbungen einige einfache Vektoren erstellt und damit operiert. NUn schauen wir uns weitere formate an.\n\n## Listen\n\nEine **Liste** kann verschiedene Datentypen enthalten (z. B. Zahlen, Zeichenketten, logische Werte).\n\nüëâ \\[Listen, Kapitel\n\n-   **Erstelle eine Liste mit drei Elementen:**\n\n    -   einem Vektor mit den Zahlen 1 bis 5\n\n    -   einem Character-Vektor mit den Namen deiner Kommiliton:innen\n\n    -   einem logischen Vektor (TRUE, FALSE)\n\n-   Greife auf das zweite Element der Liste zu.\n\n-   Greife auf den dritten Wert des ersten Elements der Liste zu.\n\n-   F√ºge der Liste ein weiteres Element hinzu (z. B. den Mittelwert der Zahlen).\n\n## Matrizen\n\nEine **Matrix** besteht nur aus einem Datentyp (z. B. nur Zahlen).\n\n-   Erstelle eine 3x3-Matrix mit den Zahlen 1 bis 9.\n\n-   Wandle einen Vektor 1:12 in eine 3x4-Matrix um.\n\n-   Greife auf das Element in der 2. Zeile, 3. Spalte zu.\n\n-   Berechne die Spaltensummen und Zeilensummen.\n\n# Data Frames\n\nEin **Data Frame** ist eine tabellarische Struktur mit Spalten, die verschiedene Datentypen enthalten k√∂nnen.\n\n-   Erstelle einen Data Frame mit drei Spalten:\n\n-   name (Character)\n\n-   alter (Numeric)\n\n-   studiert (Logical: TRUE/FALSE)\n\n-   Greife auf die Spalte \"alter\" zu\n\n-   Filtere alle Zeilen, in denen studiert == TRUE.\n\n-   F√ºge eine neue Spalte hinzu, die alter + 10 berechnet.\n\n# Daten mergen\n\n**M√∂gliche Funktionen:** z.B. `cbind()` aus Base R oder `full_join()` aus dem Tidyverse.\n\nAufgaben:\n\na)  F√ºge alle 7 Datens√§tze mit `cbind()` zusammen und schaue dir das Ergebnis an.\n\n    -   Was f√§llt dir auf?\\\n    -   Hinweis: Die Datens√§tze werden einfach nebeneinander ‚Äûgeklebt‚Äú, ohne inhaltlich abgeglichen zu werden.\n    -   Reflektiere: Macht das Sinn? Was sind die Gefahren von dieser Art daten zu mergen?\n\nb)  Versuche es nun mit `full_join()`.\n\n    -   Lege eine gemeinsame Variable als Schl√ºssel fest, hier: `by = \"code\"`.\\\n    -   Achtung: `full_join()` funktioniert immer nur mit 2 Datens√§tzen gleichzeitig ‚Üí du musst es also mehrfach anwenden, um alle 7 Datens√§tze zusammenzuf√ºhren.\\\n    -   Hinweis: Im Datensatz `data_pct` hei√üt die Code-Variable leicht anders. Verwende deshalb `by = c(\"code_all\" = \"code\")`.\n\nc)  Der neu erstellte Datensatz soll **`dat_full`** hei√üen.\n\nd)  Speichere `dat_full` in deinem Ordner `\"data\"` als CSV-Datei ab:\n\n\\`\\`\\`r write.csv(dat_full, \"data/dat_full.csv\")\n\n*xxx Weitere M√∂glichkeiten f√ºr √úbungen (ggf ist das aber auch zu viel):*\n\nUmgang mit Vektoren (z.b. bestimmte Elemente anzeigen lassen; runden (siehe Folien EH 3/4/5)\n\nUmgang mit Matrizen\n\n**ggf irgendwas zu \"calling functions\": 2.4** <https://r4ds.hadley.nz/workflow-basics.html> & 2.3 <https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html>\n\n**vl auch: warum funktioniert dieser Code nicht?** (mit einfachen Fehlern wie Typos)\n\n**Tab completions: 1.4.5** <https://methodenlehre.github.io/einfuehrung-in-R/chapters/01-workflow.html>\n\n-Listen und Matrizen\n","srcMarkdownNoYaml":"\n\n# Hands On ‚Äì Coding Basics (Einheiten 2 und 3)\n\n3te: projekte, einleksen und matrizen und listen.\n\nmatitzen vs. listen vs. dfs.\n\n4te einheit: mergen\n\nBei Bedarf findest du hier nochmals die Slides zu Einheit 3:\\\n<iframe src=\"EH_3.html\" width=\"100%\" height=\"500px\"></iframe>\n\n## Lernziele dieses Hands-On-Blocks\n\n-   **Verstehen von Pfaden und Projekten:**\n\n    -   Relativ vs. Absolut\n    -   Projekte\n\n-   **Coding Basics:**\n\n    -   Daten einlesen\n    -   Daten exportieren\n    -   Datens√§tze mergen (zusammenf√ºgen)\n        -   Vor- und Nachteile verschiedener Funktionen kennenlernen (Wann brauche ich welche Funktion?)\n\n-   Liste und Matrizen\n\n    -   \n\n# Projekte und Pfade\n\n### Was sind R-Projekte?\n\nüëâ [Kapitel 6.2 R4DS](https://r4ds.hadley.nz/workflow-scripts.html#projects)\n\nEin **R-Projekt** ist eine Projektdatei (`.Rproj`), die du in RStudio anlegst.\\\nWenn du ein Projekt √∂ffnest:\n\n-   RStudio setzt automatisch das **Working Directory (Arbeitsverzeichnis)** auf den Ordner, in dem die `.Rproj` liegt.\\\n-   Alle Dateien, Skripte, Daten und Ergebnisse, die du in diesem Ordner ablegst, geh√∂ren logisch zu diesem Projekt.\\\n-   Man kann es sich vorstellen wie einen ‚ÄûContainer‚Äú f√ºr ein Forschungsprojekt, eine Hausarbeit oder ein Analysepaket.\\\n-   Du kannst entweder ein neues Projekt erstellen oder ein bestehendes Projekt √∂ffnen.\n\nüëâ In RStudio siehst du oben rechts, in welchem Projekt du dich gerade befindest.\n\n![](images/EH3/Project.png)\n\n**√úbung:**\\\nIm Ordner *grinschgl2020* liegt bereits eine `.Rproj`-Datei. √ñffne sie und √ºberpr√ºfe oben rechts in RStudio, ob du dich im richtigen Projekt befindest.\n\n------------------------------------------------------------------------\n\n### Absolute vs. relative Pfade\n\n-   **Absolute Pfade** beschreiben den vollst√§ndigen Weg zu einer Datei, ausgehend vom Wurzelverzeichnis deines Computers.\n    -   Nachteil: Sie sind oft sehr lang und funktionieren nur auf deinem Rechner.\\\n    -   Beispiel (Windows):\\\n        `C:\\Users\\maxmustermann\\Dokumente\\r_you_ready\\Grinschgl2020\\data\\raw\\Beispieldatei.csv`\n-   **Relative Pfade** beschreiben den Ort einer Datei relativ zum aktuellen Working Directory.\n    -   Vorteil: Sie sind k√ºrzer und funktionieren auf jedem Rechner, solange die Projektstruktur gleich bleibt.\\\n\n    -   Beispiel:\n\n        -   Projektordner = *Grinschgl2020*\\\n        -   Datei liegt in *data/raw/Beispieldatei.csv*\\\n        -   relativer Pfad:\\\n\n        ```         \n        data/raw/Beispieldatei.csv\n        ```\n\n# Daten importieren und exportieren\n\n## Import\n\nüëâ [Kapitel 3.2](https://methodenlehre.github.io/einfuehrung-in-R/chapters/03-data_frames.html#daten-importieren)\n\n### Einlesen via Oberfl√§che\n\n-   Stelle sicher, dass du das Metapaket **tidyverse** geladen hast (siehe Hands-On 1).\\\n    Wir verwenden Funktionen aus den Packages **readr** und **readxl**, die Teil des Tidyverse sind.\n\n-   Importiere die Datei `\"data_mmq.csv\"` √ºber die Point-Click-Oberfl√§che von RStudio.\n\n    -   Tipp: Klicke auf **Environment** ‚Üí **Import Dataset** ‚Üí w√§hle `\"readr\"`-Funktion.\n    -   Schaue dir den Datensatz an: Mit welchem Trennzeichen sind die Daten getrennt?\n        -   Stelle in der Oberfl√§che `\"Delimiter\"` auf das passende Trennzeichen. Was ver√§ndert sich?\n    -   Betrachte den Code, den die Oberfl√§che generiert. Versuche den Pfad im Kontext von Projekten zu verstehen.\n    -   Schaue dir die eingelesenen Daten mit `view(data_mmq)` an.\n\n### Einlesen via Code\n\nXXXXX Namen updaten.\n\n-   Versuche, weitere CSV-Datens√§tze einzulesen: `cbt_prop`, `cvstm_prop`, `data_pct`, `vp_prop`.\\\n    Suche daf√ºr eine geeignete Funktion zum Einlesen von `.csv`.\n\n-   XXXXX Korrigiere diesen Code.\n\n-   Korrigiere diesen Code und lies damit die Datei `vp_prop` ein:\n\n-   Einige Dateien liegen im `.xlsx`-Format.\n\n    -   Verwende daf√ºr das Paket **readxl** und die Funktion `read_excel()`.\n    -   Nutze die Hilfefunktion (`?read_excel`) f√ºr Infos.\n    -   Versuche, die Datens√§tze `data_ratings` und `data_strategies` einzulesen.\n\n-   Am Ende solltest du **7 verschiedene Datens√§tze** in deinem Environment sehen.\n\n## Datens√§tze inspizieren\n\nVerschaffe dir eine √úbersicht √ºber die Datens√§tze, verwende dabei die verschiedenen Funktionen die wir daf√ºr bereits im Hands-on 1 kenengelernt haben:\n\n-   `head()`\n\n-   `glimpse()`\n\n-   `str()`\n\n-   `data_cbt`\n\n-   `summary()`\n\n![](images/clipboard-558025012.png)\n\n# Datenstrukturen: Vektoren, Listen, Matrizen und Data Frames\n\nBevor wir mit den √úbungen starten, ein √úberblick √ºber die Unterschiede:\n\n| Struktur | Eigenschaften | Beispiel-Inhalt |\n|----------------|----------------------------------|-----------------------|\n| **Vektor** | \\- Enth√§lt Elemente **eines** Datentyps<br>- Grundbaustein in R | `c(1, 2, 3)` oder `c(\"Anna\", \"Ben\")` |\n| **Liste** | \\- Kann verschiedene Datentypen enthalten<br>- Elemente k√∂nnen unterschiedlich lang sein | Zahlenvektor, Textvektor, logischer Vektor in einer Liste |\n| **Matrix** | \\- Enth√§lt nur **einen** Datentyp<br>- Hat feste Dimensionen (Zeilen, Spalten) | 3x3-Matrix mit Zahlen 1‚Äì9 |\n| **Data Frame** | \\- Tabellarisch aufgebaut<br>- Spalten k√∂nnen unterschiedliche Datentypen enthalten<br>- Jede Spalte gleich lang | Tabelle mit Name (Char), Alter (Numeric), Studiert (Logical) |\n\nüëâ Merksatz:\\\n- **Vektor** = einfachste Struktur, ein Datentyp\\\n- **Liste** = flexibel, verschiedene Datentypen\\\n- **Matrix** = ‚ÄûZahlenrechteck‚Äú, ein Datentyp\\\n- **Data Frame** = Tabelle, Spalten k√∂nnen unterschiedliche Datentypen haben\n\nWir haben in der Hands on √úbungen einige einfache Vektoren erstellt und damit operiert. NUn schauen wir uns weitere formate an.\n\n## Listen\n\nEine **Liste** kann verschiedene Datentypen enthalten (z. B. Zahlen, Zeichenketten, logische Werte).\n\nüëâ \\[Listen, Kapitel\n\n-   **Erstelle eine Liste mit drei Elementen:**\n\n    -   einem Vektor mit den Zahlen 1 bis 5\n\n    -   einem Character-Vektor mit den Namen deiner Kommiliton:innen\n\n    -   einem logischen Vektor (TRUE, FALSE)\n\n-   Greife auf das zweite Element der Liste zu.\n\n-   Greife auf den dritten Wert des ersten Elements der Liste zu.\n\n-   F√ºge der Liste ein weiteres Element hinzu (z. B. den Mittelwert der Zahlen).\n\n## Matrizen\n\nEine **Matrix** besteht nur aus einem Datentyp (z. B. nur Zahlen).\n\n-   Erstelle eine 3x3-Matrix mit den Zahlen 1 bis 9.\n\n-   Wandle einen Vektor 1:12 in eine 3x4-Matrix um.\n\n-   Greife auf das Element in der 2. Zeile, 3. Spalte zu.\n\n-   Berechne die Spaltensummen und Zeilensummen.\n\n# Data Frames\n\nEin **Data Frame** ist eine tabellarische Struktur mit Spalten, die verschiedene Datentypen enthalten k√∂nnen.\n\n-   Erstelle einen Data Frame mit drei Spalten:\n\n-   name (Character)\n\n-   alter (Numeric)\n\n-   studiert (Logical: TRUE/FALSE)\n\n-   Greife auf die Spalte \"alter\" zu\n\n-   Filtere alle Zeilen, in denen studiert == TRUE.\n\n-   F√ºge eine neue Spalte hinzu, die alter + 10 berechnet.\n\n# Daten mergen\n\n**M√∂gliche Funktionen:** z.B. `cbind()` aus Base R oder `full_join()` aus dem Tidyverse.\n\nAufgaben:\n\na)  F√ºge alle 7 Datens√§tze mit `cbind()` zusammen und schaue dir das Ergebnis an.\n\n    -   Was f√§llt dir auf?\\\n    -   Hinweis: Die Datens√§tze werden einfach nebeneinander ‚Äûgeklebt‚Äú, ohne inhaltlich abgeglichen zu werden.\n    -   Reflektiere: Macht das Sinn? Was sind die Gefahren von dieser Art daten zu mergen?\n\nb)  Versuche es nun mit `full_join()`.\n\n    -   Lege eine gemeinsame Variable als Schl√ºssel fest, hier: `by = \"code\"`.\\\n    -   Achtung: `full_join()` funktioniert immer nur mit 2 Datens√§tzen gleichzeitig ‚Üí du musst es also mehrfach anwenden, um alle 7 Datens√§tze zusammenzuf√ºhren.\\\n    -   Hinweis: Im Datensatz `data_pct` hei√üt die Code-Variable leicht anders. Verwende deshalb `by = c(\"code_all\" = \"code\")`.\n\nc)  Der neu erstellte Datensatz soll **`dat_full`** hei√üen.\n\nd)  Speichere `dat_full` in deinem Ordner `\"data\"` als CSV-Datei ab:\n\n\\`\\`\\`r write.csv(dat_full, \"data/dat_full.csv\")\n\n*xxx Weitere M√∂glichkeiten f√ºr √úbungen (ggf ist das aber auch zu viel):*\n\nUmgang mit Vektoren (z.b. bestimmte Elemente anzeigen lassen; runden (siehe Folien EH 3/4/5)\n\nUmgang mit Matrizen\n\n**ggf irgendwas zu \"calling functions\": 2.4** <https://r4ds.hadley.nz/workflow-basics.html> & 2.3 <https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html>\n\n**vl auch: warum funktioniert dieser Code nicht?** (mit einfachen Fehlern wie Typos)\n\n**Tab completions: 1.4.5** <https://methodenlehre.github.io/einfuehrung-in-R/chapters/01-workflow.html>\n\n-Listen und Matrizen\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":true,"css":["styles/website_styles.css"],"output-file":"hands_on_2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":"cosmo","toc-location":"right","toc-title":"Inhaltsverzeichnis","title":"Hands_On_2","editor":"visual"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}